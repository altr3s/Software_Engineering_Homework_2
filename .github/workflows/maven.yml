name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml -DskipTests
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: target/

      - name: Notify Telegram on failure build
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            *${{ github.actor }}* created commit.
            *Commit message: * ${{ github.event.head_commit.message }}
            *Repository *: ${{ github.repository }}
            *Commit number *: ${{ github.sha }}
            *Build Failed ❌*
      - name: Notify Telegram on success build
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            *${{ github.actor }}* created commit.
            *Commit message: * ${{ github.event.head_commit.message }}
            *Repository *: ${{ github.repository }}
            *Commit number *: ${{ github.sha }}
            *Build Success ✅*

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: target/
      - name: Test with Maven
        run: mvn -B test --file pom.xml
      - name: Save test results
        if: failure()
        run: |
          mkdir -p junit
          cp target/surefire-reports/*.xml junit/
      - name: Parse test results and create failure report
        if: failure()
        run: |
          set +e
          cat <<'EOF' > parse_testcases.sh
          #!/bin/bash
          TXT_FILE="junit/*.xml"

          print_test_info() {
            if [[ -n "$name" ]]; then
              failure_message=$(echo "$failure_message" | sed 's/&lt;/</g; s/&gt;/>/g')
              echo "Test Case: $name"
              echo "Class Name: $classname"
              echo "Failure Message: $failure_message"
              echo "Failure Type: $failure_type"
              echo "-----------------------------------"
            fi
          }

          name=""
          classname=""
          failure_message=""
          failure_type=""
          in_cdata=false

          while IFS= read -r line; do
            if [[ $line =~ \<testcase ]]; then
              print_test_info
              name=$(echo "$line" | grep -oP 'name="\K[^"]+')
              classname=$(echo "$line" | grep -oP 'classname="\K[^"]+')
              failure_message=""
              failure_type=""
              in_cdata=false
            elif [[ $line =~ \<failure ]]; then
              failure_message=$(echo "$line" | grep -oP 'message="\K[^"]+')
              failure_type=$(echo "$line" | grep -oP 'type="\K[^"]+')
              in_cdata=true
            elif [[ $line =~ \]\]\> ]]; then
              in_cdata=false
              failure_cdata=$(echo "$line" | sed -n 's/.*\[CDATA\[\(.*\)\]\].*/\1/p')
              failure_message="${failure_message}${failure_cdata}"
            elif [[ $in_cdata == true ]]; then
              failure_cdata="${line}"
              failure_message="${failure_message}${failure_cdata}"
            elif [[ $line =~ \</testcase ]]; then
              print_test_info
              name=""
              classname=""
              failure_message=""
              failure_type=""
              failure_cdata=""
            fi
          done < "$TXT_FILE"

          print_test_info
          EOF

          chmod +x parse_testcases.sh
          ./parse_testcases.sh > failure-report.txt
          failure_report=$(cat failure-report.txt)
      - name: Notify Telegram on failure
        if: failure()
        env:
          FAILURE_REPORT: ${{ failure_report }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            *Commit did not pass test(s) ⚠️.*
            ```
            ${{ env.FAILURE_REPORT }}
            ```
      - name: Notify Telegram on success
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            *Commit passed all tests ✅*
